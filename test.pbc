let id (x:*) : * = x;;

let polyid : All X.X->X = (id : *->* => All X.X->X);;

polyid [Int] 2;;

let dynsucc : *->* = fun (x:*) -> (1 + (x : * => Int) : Int => *);;

dynsucc (4 : Int => *);;

let wrongpolyid : All X.X->X = (dynsucc : *->* => All X.X->X);;

wrongpolyid [Int] 4;;

let id2 X (x:X) : X = x;;

let castid : * -> * = (id2 : All X.X->X => *->*);;

castid (3 : Int=>*);;

fun X (x:X) -> (x:X=>*);;

let f X (x:X) : * = (x:X=>*);;

fun X Y (x:X) (y:Y) -> x;;

let k X Y (x:X) (y:Y) : X = x;;